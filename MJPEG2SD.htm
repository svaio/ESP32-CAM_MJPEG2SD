	
<!doctype html>  
<!-- 
  s60sc 2022, 2023
  with ideas from @marekful
-->                           
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>ESP32-CAM_MJPEGSD</title>
    <link rel="icon" href='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y="80" font-size="80">ðŸ“·</text></svg>'>
    <style>
      :root {
        /* colors used on web pages - see https://www.w3schools.com/colors/colors_names.asp */
        --buttonReady: crimson;
        --buttonActive: ForestGreen;
        --buttonHover: green;
        --buttonText: white;
        --buttonLabel: black;
        --itemInactive: gray;
        --rangeMarker: bisque;
        --menuBackground: #3F3F3F; /* dark gray */
        --inputText: navy;
        --pageText: black; 
        --inputBackground: WhiteSmoke; 
        --itemBorder: silver; 
        --pageBackground: #181818; /* nearly black */
      }
      
      body {
          font-family: Arial,Helvetica,sans-serif;
          background: var(--pageBackground);
          color: var(--inputBackground);
          font-size: 16px
      }

      h2 {
          font-size: 18px;
          padding-left: 10px;
      }
      
      h3 {
          font-style: italic;
          font-size: 14px;
          padding-left: 5px;
      }
      h6 {
          font-style: bold;
          font-size: 9px;
          padding-left: 15px;
      }
      
     .center{
          text-align: center; 
     }
     
     .navtop{
        list-style: none;
        border: 1px solid var(--itemBorder);
        border-radius: 6px;
        padding: 5px;
        margin: 0.5em;
     }
     .navtop li {
       float: left;
       position: relative;
     }
       
     nav#maintoolbar {
        display: flex;
        flex-wrap: nowrap;
        justify-content: flex-end;
        overflow: auto;
     }
                  
     section#main {
        display: flex;
        flex-direction: column;
     }
     section#header {
        min-width: 332px;
        background: var(--menuBackground);
        margin-bottom: 2px;
        padding: 1px 1px;
        display: flex;
        flex-wrap: wrap;
        border-radius: 2px;
        justify-content: space-between;
     }
     #sidebar{
        margin: 0px;
        padding: 0px;         
        width: 100%;
     }                        
     section#title{
        display: flex;
     }
     section#footer {
        position: fixed;
        bottom: 0;
        width: 97%;
        min-width: 332px;
        background: var(--menuBackground);
        margin-top: 0px;
        padding: 4px 12px;
        display: flex;
        flex-wrap: wrap;
        border-radius: 4px 4px 0 0;
        justify-content: space-between;
        font-size: 11px;
        z-index: 4;
        border-top: 1px solid var(--itemBorder);
        border-left: 1px solid var(--itemBorder);
        border-right: 1px solid var(--itemBorder);
        border-bottom: none;
      }

      #foot-spacer {
          height: 60px;
      }

      nav.menu {
        display: grid;
        flex-direction: column;
        flex-wrap: nowrap;
        min-width: 332px;
        background: var(--menuBackground);
        padding: 8px;
        border-radius: 0 4px 4px 4px;
        margin-bottom: 3px;
        border: 1px solid var(--itemBorder);
      }
      nav.menu.buttons {
          min-width: 388px;
      }
      nav.menu.panel {
          display: none;
          min-height: 330px;
      }
      nav.menu.panel.active {
          display: block;
      }

      #menu-top.menu-floating nav.menu.panel {
          border-radius: 0 4px 4px 4px;
      }
      #menu-top.menu-pinned nav.menu.panel {
          border-radius: 0 4px 4px 4px;
          height: 112%;
          left: -1px;
          position: relative;
      }
      #menu-container {
          position: relative;
          min-width: 60px;
          min-height: 332px;
          border-radius: 4px;
          left: 2px;
          top: 4px;
      }
      #menu-container.menu-floating {
          display: table;
      }
      #menu-container.menu-pinned {
          display: flex;
      }
      #menu-top {
          display: inline-grid;
          display: -moz-inline-grid;
          display: -ms-inline-grid;
      }
      #menu-top.menu-floating {
          position: absolute;
          left: 58px;
          z-index: 2;
      }
      #menu-top.menu-pinned {
          position: initial;
          left: initial;
          float: left;
          z-index: 4;
          border-left: none;
      }
      #menu-selector {
          z-index: 4;
          background: var(--menuBackground);
          width: 58px;
      }
      #menu-selector.menu-floating {
          position: absolute;
      }
      #menu-selector.menu-pinned {
          position: relative;
          float: left;
          height: 100%;
          border-right: none;
          z-index: 5;
      }
      .menu-floating.menu-open {
          border-radius: 4px 0 0 4px;
          border: 1px solid var(--itemBorder);
          border-right: none;
      }
      .menu-floating.menu-closed {
          border-radius: 4px;
          border: 1px solid var(--itemBorder);
      }
      .menu-pinned.menu-open {
          border-radius: 4px 0 0 4jpx;
          border: 1px solid var(--itemBorder);
      }
      .menu-pinnded.menu-closed {
          border-radius: 4px;
          border: 1px solid var(--itemBorder);
      }
      .pin-menu {
          width: 24px;
          height: 24px;
          float: right;
          cursor: pointer;
      }

      nav.quick-nav {
          width: 32px;
          height: 32px;
          margin: 8px 6px 12px 8px;
          border: 1px solid var(--itemBorder);
          border-radius: 4px;
          cursor: pointer;
          font-size: 150%;
          padding: 4px 0 4px 4px;
          background: var(--buttonReady);
      }

      nav.quick-nav:hover {
          background: var(--buttonHover);
      }

      nav.quick-nav.active {
          box-shadow: 0 0 0 4px var(--buttonActive);
          background: var(--buttonActive);
      }

      #content {
          display: flex;
          flex-wrap: wrap;
          align-items: stretch
      }

      figure {
          padding: 0px;
          margin: 0;               
          width: 100%;
          height: auto;
          -webkit-margin-before: 0;
          margin-block-start: 0;
          -webkit-margin-after: 0;
          margin-block-end: 0;
          -webkit-margin-start: 0;
          margin-inline-start: 0;
          -webkit-margin-end: 0;
          margin-inline-end: 0;
      }
      
      .image-container {
        position: relative;
      }

      figure img {
          display: block;
          width: 100%;
          height: 100%;
          border-radius: 4px;
      }

      @media (min-width: 800px) and (orientation:landscape) {
          #content {
              display:flex;
              flex-wrap: nowrap;
              align-items: stretch
          }
          #sidebar{
            width: auto;
          }                                
      }

      section#buttons {
          display: flex;
          flex-wrap: nowrap;
          justify-content: center;
      }

      .input-group {
          position: relative;
          display: flex;
          flex-wrap: nowrap;
          line-height: 29px;
          margin: 5px 0
      }
      .info-group {
          position: relative;                               
          margin: 5px 0;
          
      }
      .input-group>label {
          display: inline-block;
          padding-right: 10px;
          min-width: 47%;
      }
      .input-group>input {
          width: 100%;
      }

      .input-group input,.input-group select {
          flex-grow: 1
      }

      .range-max,.range-min {
          display: inline-block;
          padding: 0 5px;
      }

      button {
          min-height: 35px;
          display: block;
          margin: 5px;
          padding: 0 6px;
          border: 0;
          line-height: 20px;
          cursor: pointer;
          color: var(--buttonText);
          background: var(--buttonReady);
          border-radius: 5px;
          font-size: 16px;
          outline: 0
      }

      button:active {
         box-shadow: 0 0 0 4px var(--buttonActive);
         background: var(--buttonActive);
      }

      button:hover {
          background: var(--buttonHover);
      }

      button:disabled {
          cursor: default;
          background: var(--itemInactive)
      }
            
      input[type=range] {
          -webkit-appearance: none;
          width: 100%;
          height: 22px;
          background: var(--menuBackground);
          cursor: pointer;
          margin: 0
      }

      input[type=range]:focus {
          outline: 0
      }

      input[type=range]::-webkit-slider-runnable-track {
          width: 100%;
          height: 2px;
          cursor: pointer;
          background: var(--inputBackground);
          border-radius: 0;
          border: 0 solid var(--inputBackground);
      }

      input[type=range]::-webkit-slider-thumb {
          border: 1px solid rgba(0,0,30,0);
          height: 22px;
          width: 22px;
          border-radius: 50px;
          background: var(--buttonReady);
          cursor: pointer;
          -webkit-appearance: none;
          margin-top: -11.5px
      }

      input[type=range]:focus::-webkit-slider-runnable-track {
          background: var(--inputBackground);
      }

      input[type=range]::-moz-range-track {
          width: 100%;
          height: 2px;
          cursor: pointer;
          background: var(--inputBackground);
          border-radius: 0;
          border: 0 solid var(--inputBackground);
      }

      input[type=range]::-moz-range-thumb {
          border: 1px solid rgba(0,0,30,0);
          height: 22px;
          width: 22px;
          border-radius: 50px;
          background: var(--buttonReady);
          cursor: pointer
      }

      input[type=range]::-ms-track {
          width: 100%;
          height: 2px;
          cursor: pointer;
          background: 0 0;
          border-color: transparent;
          color: transparent
      }

      input[type=range]::-ms-fill-lower {
          background: var(--inputBackground);
          border: 0 solid var(--inputBackground);
          border-radius: 0
      }

      input[type=range]::-ms-fill-upper {
          background: var(--inputBackground);
          border: 0 solid var(--inputBackground);
          border-radius: 0
      }

      input[type=range]::-ms-thumb {
          border: 1px solid rgba(0,0,30,0);
          height: 22px;
          width: 22px;
          border-radius: 50px;
          background: var(--buttonReady);
          cursor: pointer;
          height: 2px
      }

      input[type=range]:focus::-ms-fill-lower {
          background: var(--inputBackground)
      }

      input[type=range]:focus::-ms-fill-upper {
          background: var(--menuBackground)
      }
      
      input {
          font:16px 'Courier New';
          font-weight:bold;
          color: var(--inputText);
          background: var(--inputBackground);
      }

     .configGroup td {
        border: solid 2px var(--itemBorder);
      }
      
      #applog, #sdlog {
        font:20px 'Courier New';
        font-weight:bold;
        color: var(--inputText);
        height:90%;
        width:90%;
        border:2px solid var(--itemBorder);
        overflow:auto;
        background: var(--inputBackground);
      }

      .switch {
          display: block;
          position: relative;
          line-height: 22px;
          font-size: 16px;
          height: 22px
      }

      .switch input {
          outline: 0;
          opacity: 0;
          width: 0;
          height: 0
      }

      .slider {
          width: 50px;
          height: 22px;
          border-radius: 22px;
          cursor: pointer;
          background: var(--itemInactive);
      }

      .slider,.slider:before {
          display: inline-block;
          transition: .4s
      }

      .slider:before {
          position: relative;
          content: "";
          border-radius: 50%;
          height: 16px;
          width: 16px;
          left: 4px;
          top: 3px;
          background: var(--inputBackground);
      }

      input:checked+.slider {
          background: var(--buttonActive);
      }

      input:checked+.slider:before {
          -webkit-transform: translateX(26px);
          transform: translateX(26px)
      }

      select {
          border: 1px solid var(--menuBackground);
          font-size: 14px;
          outline: 0;
          border-radius: 5px
      }
      
      .streamSize {
          position: absolute;
          top: 5px;
          background: var(--buttonReady);
          width: 16px;
          height: 16px;
          border-radius: 100px;
          color: var(--buttonText);
          text-align: center;
          line-height: 18px;
          cursor: pointer;
          text-decoration: none;
      }
      
      .hidden {
          display: none
      }
      
      output {
        position: absolute;
        top: -32px;
        display: none;
        width: 50px;
        height: 24px;
        border: 1px solid var(--itemBorder);
        background: var(--rangeMarker);
        border-radius: 3px;
        color: var(--buttonLabel);
        font-size: .8em;
        font-weight: bold;
        line-height: 24px;
        text-align: center;
      }

      .extras {
          display: none;
      }

      input[type=range]:active + output {
        display: block;
        -webkit-transform: translateX(180px);
      }
              
      .nav-toggle {
          margin: 0 0 4px 4px;
          font-size: 120%;
          display: block;
          margin-bottom: 12px;
          padding-bottom: 8px;
          border-bottom: 1px solid var(--itemBorder);
      }

      .menu-action {
        display: none;
      }

      .menu-action + label + div {
        padding: 10px 0 0 0;
        margin: 6px 0 0 0;
        border-top: 1px solid var(--itemBorder);
      }

      .menu-action:not(:checked) + label + div { 
        display: none; 
      }

      .sep {
        border: 1px solid var(--itemBorder);
        height: 32px;
        margin: 6px 8px 0 8px;
      }
      .vsep {
        border: 1px solid var(--itemBorder);
        margin: 10px 2px;
      }

      .info{
        margin-top: 2px;
      }
      .info-group label {
        color: var(--itemInactive);
      }
      .blinking {
        animation: blinker 1.5s linear infinite;
      }
      #recording-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        padding: 4px;
        margin: 9px;
        background: var(--buttonReady);
        border-radius: 16px;
        border: 2px solid var(--itemBorder);
      }

      @keyframes blinker {
        50% {
          opacity: .4;
        }
      }

      #stream-container {
          margin: 4px 8px 42px 8px;
          border: 1px solid var(--itemBorder);
      }

      .tab {
        display: flex;
        overflow: hidden;
        background: var(--menuBackground);
      }

      .tab button {
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding:10px 10px;
        transition: 0.3s;
        font-size: 17px;
      }

      .tab button.active {
        box-shadow: 0 0 0 4px var(--buttonActive);
        background: var(--buttonActive);
      }
      
      .tab button.hover {
         background: var(--buttonHover);
      }
      
      .tab button.disabled {
          cursor: default;
          background: var(--itemInactive)
       }
       
      .tabcontent {
        display: none;
      }
      
     .grid-cols3 {
        grid-template-columns: 220px 200px 200px;
      }

     .grid-cols4 {
        grid-template-columns: 150px 150px 150px 150px
      }
      
      .cfgTitle {
        grid-column: 1/5;
        text-align: left;
      }

      .grid-cols3, .grid-cols4 {
        display: grid;
        background: none;
        text-align: center;
        font-size: 30px;
        border: 0px solid var(--itemBorder);
        dominant-baseline: middle;
        text-anchor: middle;
      }
      
      rect {
         fill: var(--buttonReady);
         width: 100%;
         height: 100%; 
         x: 0;
         y: 0;
         rx: 5%;
       }
      
      rect:active {
        fill: var(--buttonActive);
      }
      
      rect:hover{
        fill: var(--buttonHover);
      }
    
      text {
        font-size: 17px; 
        fill: var(--buttonText);
        pointer-events: none;
      }

    </style>
  </head>
  
  <body>
    <div class="tab">
      <ul class="navtop">
        <button class="tablinks camTab active" name="camModel">Camera</button>
        <button class="tablinks" name="ShowLog">Show Log</button>
        <button class="tablinks" name="EditConfig">Edit Config</button>
        <button class="tablinks" name="OTAUpload">OTA Upload</button>
      </ul>
      <section id="main">
        <nav id="maintoolbar">
          <ul class="navtop">
            <li><span id="recording-indicator" style="float: right; display: none;"></span></li>
            <li><button id="forceRecord" class="default-action" style="float:right;">âž¤&nbsp;Start Recording</button></li>   
            <li><div class="sep"></div></li>
            <li><button id="forceStream" class="default-action" style="float:right;">âž¤&nbsp;Start Stream</button></li>
            <li><button id="get-still" style="float:right;">Get Still</button></li>
            <li><div class="sep"></div></li>
            <li><button id="forcePlayback" class="default-action" style="float:right;" disabled="disabled" title="Select a video in 'Playback & File Transfers' to activate playback.">âž¤&nbsp;Start Playback</button></li>
          </ul>
         </nav>
       </section>
     </div>
    
    <div id="camModel" class="tabcontent" style="display:block">
      <div id="content">
        <div id="sidebar">
          <div id="menu-container" class="menu-pinned">
            <nav id="menu-selector" class="menu-pinned menu-closed">
              <nav class="quick-nav" id="camControl" name="camera-control">ðŸ“·</nav>
              <nav class="quick-nav" id="motionRec" name="motion-record">ðŸ‘€</nav>
              <nav class="quick-nav" id="fileControl" name="playback-transfers">ðŸŽ¥</nav>
              <nav class="quick-nav" id="picSettings" name="picture-settings">ðŸ“º</nav>
              <nav class="quick-nav" id="accSettings" name="access-settings">ðŸ”§</nav>
            </nav>
            <div id="menu-top" class="menu-pinned">
              <nav class="menu panel" id="camera-control">
                <input type="checkbox" id="control-cb" class="menu-action" checked="checked">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="control-cb" class="nav-toggle">ðŸ“·&nbsp;&nbsp;Camera Control&nbsp;&nbsp;</label>
                <div>                    
                  <div class="input-group" id="framesize-group">
                    <label for="framesize">Resolution</label>
                    <select id="framesize" class="default-action">
                      <option class="OV5640 hidden" value="21">QSXGA(2560x1920)</option>
                      <option class="OV5640 hidden" value="20">P_FHD(1080x1920)</option>
                      <option class="OV5640 hidden" value="19">WQXGA(2560x1600)</option>
                      <option class="OV5640 hidden" value="18">QHD(2560x1440)</option>
                      <option class="OV3660 OV5640 hidden" value="17">QXGA(2048x1564)</option>
                      <option class="OV3660 hidden" value="16">P_3MP(864x1564)</option>
                      <option class="OV3660 OV5640 hidden" value="15">P_HD(720x1280)</option>
                      <option class="OV3660 OV5640 hidden" value="14">FHD(1920x1080)</option>
                      <option value="13">UXGA(1600x1200)</option>
                      <option value="12">SXGA(1280x1024)</option>
                      <option value="11">HD(1280x720)</option>
                      <option value="10">XGA(1024x768)</option>
                      <option value="9" selected="selected">SVGA(800x600)</option> 
                      <option value="8">VGA(640x480)</option> 
                      <option value="7">HVGA(480x320)</option>
                      <option value="6">CIF(400x296)</option> 
                      <option value="5">QVGA(320x240)</option>
                      <option value="4">240x240</option> 
                      <option value="3">HQVGA(240x176)</option> 
                      <option value="2">QCIF(176x144)</option> 
                      <option value="1">QQVGA(160x120)</option> 
                      <option value="0">96x96</option>
                      </div>
                    </select>
                  </div>
                  <div class="input-group" id="fps-group">
                      <label for="fps">FPS</label>
                      <div class="range-min">1</div>
                      <input title="Set camera required frames per second" type="range" id="fps" min="1" max="30" value="10" class="default-action">
                      <output name="rangeVal">15</output>
                      <div class="range-max">30</div>
                  </div>
                  <div class="input-group" id="quality-group">
                      <label for="quality">Quality</label>
                      <div class="range-min">4</div>
                      <input title="Set the recording quality" type="range" id="quality" min="4" max="63" value="10" class="default-action">
                      <output name="rangeVal">10</output>
                      <div class="range-max">63</div>
                  </div>                          
                  <div class="input-group" id="micGain-group">
                    <label for="micGain">Microphone Gain</label>
                    <div class="range-min">0</div>
                    <input title="Set microphone gain" type="range" id="micGain" min="0" max="10" value="0" class="default-action">
                    <output name="rangeVal">0</output>
                    <div class="range-max">10</div>
                  </div>
                  <div class="input-group" id="CamTilt-group">
                    <label for="camTilt">Camera Tilt</label>
                    <div class="range-min">0</div>
                    <input title="Set camera tilt angle" type="range" id="camTilt" min="0" max="180" value="90" class="default-action">
                    <output name="rangeVal">90</output>
                    <div class="range-max">180</div>
                  </div>
                  <div class="input-group" id="CamPan-group">
                    <label for="camPan">Camera Pan</label>
                    <div class="range-min">0</div>
                    <input title="Set camera pan angle" type="range" id="camPan" min="0" max="180" value="90" class="default-action">
                    <output name="rangeVal">90</output>
                    <div class="range-max">180</div>
                  </div>
                  <div class="input-group" id="lamp-group">
                    <label for="lamp">Lamp</label>
                    <div class="range-min">0</div>
                     <input title="Control onboard lamp led brightness" type="range" id="lampLevel" min="0" max="15" value="0" class="default-action">
                     <output name="rangeVal">0</output>
                    <div class="range-max">15</div>
                  </div>
                </div>
              </nav>
              <nav class="menu panel" id="picture-settings">                                                   
                <input type="checkbox" id="settings-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="settings-cb" class="nav-toggle">ðŸ“º&nbsp;&nbsp;Picture Settings&nbsp;&nbsp;</label>
                <div>
                  <div class="input-group" id="xclk-group">
                      <label for="set-xclk">Clock MHz</label>
                      <div class="text">
                          <input id="xclkMhz" title="Set camera clock speed in MHz" type="text" minlength="1" maxlength="2" size="2" value="20">
                      </div>
                  </div>
                  <div class="input-group" id="brightness-group">
                    <label for="brightness">Brightness</label>
                    <div class="range-min">-2</div>
                    <input type="range" id="brightness" min="-2" max="2" value="0" class="default-action">
                    <output name="rangeVal">0</output>
                    <div class="range-max">2</div>
                  </div>
                  <div class="input-group" id="contrast-group">
                    <label for="contrast">Contrast</label>
                    <div class="range-min">-2</div>
                    <input type="range" id="contrast" min="-2" max="2" value="0" class="default-action">
                    <output name="rangeVal">0</output>
                    <div class="range-max">2</div>
                  </div>
                  <div class="input-group" id="saturation-group">
                    <label for="saturation">Saturation</label>
                    <div class="range-min">-2</div>
                    <input type="range" id="saturation" min="-2" max="2" value="0" class="default-action">
                    <output name="rangeVal">0</output>
                    <div class="range-max">2</div>
                  </div>
                  <div class="OV3660 OV5640 hidden">
                    <div class="input-group" id="sharpness-group">
                      <label for="sharpness">Sharpness</label>
                      <div class="range-min">-3</div>
                      <input type="range" id="sharpness" min="-3" max="3" value="0" class="default-action">
                      <output name="rangeVal">0</output>
                      <div class="range-max">3</div>
                    </div>
                    <div class="input-group" id="denoise-group">
                      <label for="denoise">De-Noise</label>
                      <div class="range-min">Auto</div>
                      <input type="range" id="denoise" min="0" max="8" value="0" class="default-action">
                      <output name="rangeVal">0</output>
                      <div class="range-max">8</div>
                    </div>
                  </div>
                  <div class="input-group" id="special_effect-group">
                    <label for="special_effect">Special Effect</label>
                    <select id="special_effect" class="default-action">
                      <option value="0" selected="selected">No Effect</option>
                      <option value="1">Negative</option>
                      <option value="2">Grayscale</option>
                      <option value="3">Red Tint</option>
                      <option value="4">Green Tint</option>
                      <option value="5">Blue Tint</option>
                      <option value="6">Sepia</option>
                    </select>
                  </div>
                  <div class="input-group" id="awb-group">
                      <label for="awb">AWB Enable</label>
                      <div class="switch">
                          <input id="awb" type="checkbox" class="default-action" checked="checked">
                          <label class="slider" for="awb"></label>
                      </div>
                  </div>
                  <div class="input-group" id="awb_gain-group">
                    <label for="awb_gain" id="awbg_lab">AWB Gain</label>
                    <div class="switch">
                      <input id="awb_gain" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="awb_gain"></label>
                    </div>
                  </div>
                  <div class="input-group" id="wb_mode-group">
                    <label for="wb_mode">AWB Mode</label>
                    <select id="wb_mode" class="default-action">
                      <option value="0" selected="selected">Auto</option>
                      <option value="1">Sunny</option>
                      <option value="2">Cloudy</option>
                      <option value="3">Office</option>
                      <option value="4">Home</option>
                    </select>
                  </div>
                  <div class="input-group" id="aec-group">
                    <label for="aec">AEC Enable</label>
                    <div class="switch">
                      <input id="aec" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="aec"></label>
                    </div>
                  </div>
                  <div class="input-group" id="aec_value-group">
                    <label for="aec_value">Manual Exposure</label>
                    <div class="range-min">0</div>
                    <input type="range" id="aec_value" min="0" max="1200" value="204" class="default-action">
                    <output name="rangeVal">204</output>
                    <div class="range-max">1200</div>
                  </div>
                  <div class="input-group" id="ae_level-group">
                    <label for="ae_level">Exposure Level</label>
                    <div class="range-min">-2</div>
                    <input type="range" id="ae_level" min="-2" max="2" value="0" class="default-action">
                    <output name="rangeVal">0</output>
                    <div class="range-max">2</div>
                  </div>
                  <div class="input-group" id="aec2-group">
                    <label for="aec2" id="aec2_lab">AEC DSP</label>
                    <div class="switch">
                      <input id="aec2" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="aec2"></label>
                    </div>
                  </div>
                  <div class="input-group" id="dcw-group">
                    <label for="dcw" id="dcw_lab">DCW (Downsize EN)</label>
                    <div class="switch">
                      <input id="dcw" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="dcw"></label>
                    </div>
                  </div>
                  <div class="input-group" id="agc-group">
                    <label for="agc">AGC Enable</label>
                    <div class="switch">
                      <input id="agc" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="agc"></label>
                    </div>
                  </div>
                  <div class="input-group hidden" id="agc_gain-group">
                    <label for="agc_gain">Gain</label>
                    <div class="range-min">1x</div>
                    <input type="range" id="agc_gain" min="0" max="30" value="5" class="default-action">
                    <output name="rangeVal">5</output>
                    <div class="range-max">31x</div>
                  </div>
                  <div class="input-group" id="gainceiling-group">
                    <label for="gainceiling">Gain Ceiling</label>
                    <div class="range-min">2x</div>
                    <input type="range" id="gainceiling" min="0" max="6" value="0" class="default-action">
                    <output name="rangeVal">0</output>
                    <div class="range-max">128x</div>
                  </div>       
                  <div class="input-group" id="lenc-group">
                    <label for="lenc">Lens Correction</label>
                    <div class="switch">
                      <input id="lenc" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="lenc"></label>
                    </div>
                  </div>
                  <div class="input-group" id="hmirror-group">
                    <label for="hmirror">H-Mirror</label>
                    <div class="switch">
                      <input id="hmirror" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="hmirror"></label>
                    </div>
                  </div>
                  <div class="input-group" id="vflip-group">
                    <label for="vflip">V-Flip</label>
                    <div class="switch">
                      <input id="vflip" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="vflip"></label>
                    </div>
                  </div>
                  <div class="input-group" id="colorbar-group">
                    <label for="colorbar">Color Bar</label>
                    <div class="switch">
                      <input id="colorbar" type="checkbox" class="default-action">
                      <label class="slider" for="colorbar"></label>
                    </div>
                  </div>
                  <div class="input-group" id="bpc-group">
                    <label for="bpc">BPC</label>
                    <div class="switch">
                      <input id="bpc" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="bpc"></label>
                  </div>
                  </div>
                  <div class="input-group" id="wpc-group">
                    <label for="wpc">WPC</label>
                    <div class="switch">
                      <input id="wpc" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="wpc"></label>
                    </div>
                  </div>
                  <div class="input-group" id="raw_gma-group">
                    <label for="raw_gma">GMA Enable</label>
                    <div class="switch">
                      <input id="raw_gma" type="checkbox" class="default-action" checked="checked">
                      <label class="slider" for="raw_gma"></label>
                    </div>
                  </div>                  
                </div>            
              </nav>
              <nav class="menu panel" id="motion-record">
                <input type="checkbox" id="motion-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="motion-cb" class="nav-toggle">ðŸ‘€&nbsp;&nbsp;Motion Detect & Recording&nbsp;&nbsp;</label>
                <div>
                  <div class="input-group" id="motion-group">
                    <label for="enableMotion">Enable motion detect</label>
                    <div class="switch">
                      <input id="enableMotion" type="checkbox" class="default-action">
                      <label title="Enable/disable motion detection" class="slider" for="enableMotion"></label>
                    </div>
                  </div>
                  <div class="input-group" id="motion-group">
                    <label for="motion">Motion Sensitivity</label>
                    <div class="range-min">1</div>
                    <input title="Set motion detection sensitivity" type="range" id="motionVal" min="1" max="10" value="7" class="default-action">
                    <output name="rangeVal">7</output>
                    <div class="range-max">10</div>
                  </div> 
                  <div class="input-group" id="minf-group">
                    <label for="minf">Min Seconds</label>
                    <div class="range-min">0</div>
                    <input title="Minimum number of frames to be captured or the file is deleted" type="range" id="minf" min="0" max="20" value="5" class="default-action">
                    <output name="rangeVal">5</output>
                    <div class="range-max">20</div>
                  </div>                     
                  <div class="input-group" id="record-group">
                      <label for="record">Save Capture</label>
                      <div class="switch">
                        <input id="record" type="checkbox" class="default-action">
                        <label title="Enable recording on motion detection" class="slider" for="record"></label>
                      </div>
                  </div> 
                  <div class="input-group" id="dbgMotion-group">
                    <label for="dbgMotion">Show Motion</label>
                    <div class="switch">
                      <input id="dbgMotion" type="checkbox" class="default-action">
                      <label title="Display detected camera motion" class="slider" for="dbgMotion"></label>
                    </div>
                  </div>
                  <div class="input-group" id="lswitch-group">
                    <label for="lswitch">Night Switch</label>
                    <div class="range-min">0</div>
                    <input title="Set night switch sensitivity" type="range" id="lswitch" min="0" max="100" value="10" class="default-action">
                    <output name="rangeVal">10</output>
                    <div class="range-max">100</div>
                  </div> 
                  <div class="vsep"></div>
                  <div class="input-group" id="tlapse-group">
                    <label for="timeLapseOn">Time Lapse</label>
                    <div class="switch">
                      <input id="timeLapseOn" type="checkbox" class="default-action">
                      <label title="Enable time lapse recording" class="slider" for="timeLapseOn"></label>
                    </div>
                  </div>                
                </div>
              </nav>
              <nav class="menu panel" id="playback-transfers">
                <input type="checkbox" id="files-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="files-cb" class="nav-toggle">ðŸŽ¥&nbsp;&nbsp;Playback & File Transfers&nbsp;&nbsp;</label>
                <div>
                  <div class="input-group" id="sfiles-group" style="display: grid;">
                    <label for="sfiles">Select folder / file</label>                          
                    <select title="Select sd card file or folder" id="sfile" size="16" style="font-size: 90%;">
                      <option value="/~reset" selected="selected">-- Select --</option>
                      <option value="/">Get Folders</option>
                      <option value="/~current">List current (today)</option>
                      <option value="/~previous">List previous (yesterday)</option>
                    </select>
                  </div>
                  <div>
                    <progress id="progressBar" value='0' max='100' class="default-action info"></progress>%
                  </div>
                  <br/>
                  <section id="buttons">
                    <button title="Download selected file from sd card" id="download" style="float:right; " value="1">Download</button>
                    <button title="Upload selected file/folder to ftp server" id="upload" style="float:left; " value="1">Ftp Upload</button>
                    <button title="Upload selected file/folder and delete it from sd card on success" id="uploadMove" style="float:left; " value="1">Ftp Move</button>
                    <button title="Delete selected file/folder from sd card" id="delete" style="float:right; " value="1">Delete</button>
                  </section>
                  <br/>
                  <div class="input-group" id="autoUpload-group">
                      <label for="autoUpload">Auto upload</label>
                      <div class="switch">
                        <input id="autoUpload" type="checkbox" class="default-action">
                        <label title="Automatic ftp upload on file creation" class="slider" for="autoUpload"></label>
                      </div>
                  </div>
                </div>
              </nav>
              <nav class="menu panel" id="access-settings">
                <input type="checkbox" id="other-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="other-cb" class="nav-toggle">ðŸ”§&nbsp;&nbsp;Access Settings&nbsp;&nbsp;</label>
                <div>
                  <section id="buttons">
                    <button id="save" style="float:right;">Save settings</button>
                    <button id="reboot" style="float:right;">Reboot ESP</button>
                  </section>
                </div>  
                <br/>
                <div>
                  <h3>Network settings</h3>
                  <div class="input-group" id="wifi-group">
                    <label for="hostName">Host Name</label>
                    <input id="hostName" name="hostName" length=32 placeholder="Host name" class="default-action">
                  </div>
                  <div class="input-group" id="wifi-group">
                    <label for="ST_SSID">SSID</label>
                    <input id="ST_SSID" name="ST_SSID" length=32 placeholder="Router SSID" class="default-action">
                  </div>
                  <div class="input-group" id="wifi-group">
                    <label for="ST_Pass">Password</label>
                    <input id="ST_Pass" name="ST_Pass" length=64 placeholder="Router password" class="default-action">
                  </div>
                  <br>
                  <h3>Clock settings</h3>
                  <div class="input-group" id="time-group">
                    <label for="timezone">Time zone</label>
                    <input id="timezone" name="timezone" length=64 placeholder="Time zone string" class="default-action">
                  </div>
                  <div class="input-group" id="time-group">
                    <label for="timezoneSel">Time zone select</label>
                    <select id="timezoneSel" name="timezoneSel">
                      <option value="" selected>&nbsp;-- Select --</option>
                      <option value="EET-2EEST-3,M3.5.0/03:00:00,M10.5.0/04:00:00">Europe/Athens</option>
                      <option value="GMT-1BST,M3.5.0/01,M10.5.0/02">Europe/Belfast</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Berlin</option>
                      <option value="GMT-1BST,M3.5.0/1,M10.5.0">Europe/London</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Paris</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Rome</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Zurich</option>
                      <option value="<-12>12">GMT-12:00</option>
                      <option value="<-11>11">GMT-11:00</option>
                      <option value="<-10>10">GMT-10:00</option>
                      <option value="<-09>9">GMT-9:00</option>
                      <option value="<-08>8">GMT-8:00</option>
                      <option value="<-07>7">GMT-7:00</option>
                      <option value="<-06>6">GMT-6:00</option>
                      <option value="<-05>5">GMT-5:00</option>
                      <option value="<-04>4">GMT-4:00</option>
                      <option value="<-03>3">GMT-3:00</option>
                      <option value="<-02>2">GMT-2:00</option>
                      <option value="<-01>1">GMT-1:00</option>
                      <option value="GMT0">GMT+0:00</option>
                      <option value="<+01>-1">GMT+1:00</option>
                      <option value="<+02>-2">GMT+2:00</option>
                      <option value="<+03>-3">GMT+3:00</option>
                      <option value="<+04>-4">GMT+4:00</option>
                      <option value="<+05>-5">GMT+5:00</option>
                      <option value="<+06>-6">GMT+6:00</option>
                      <option value="<+07>-7">GMT+7:00</option>
                      <option value="<+08>-8">GMT+8:00</option>
                      <option value="<+09>-9">GMT+9:00</option>
                      <option value="<+10>-10">GMT+10:00</option>
                      <option value="<+11>-11">GMT+11:00</option>
                      <option value="<+12>-12">GMT+12:00</option>                                  
                    </select>
                  </div>
                  <div class="input-group extras" id="time-group">
                    <label for="clockUTC">Camera UTC</label>
                    <input id="clockUTC" name="clockUTC" length=20 style="max-width:124px" class="default-action">
                  </div>
                  <br>                          
                  <h3>Ftp settings</h3>
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_server">Ftp Server</label>
                    <input id="ftp_server" name="ftp_server" length=32 placeholder="Ftp server name" class="default-action">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_port">Ftp port</label>
                    <input id="ftp_port" name="ftp_port" length=6 placeholder="Ftp port" class="default-action">
                  </div>                          
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_user">Ftp user name</label>
                    <input id="ftp_user" name="ftp_user" length=32 placeholder="Ftp user name" class="default-action">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="FTP_Pass">Ftp password</label>
                    <input id="FTP_Pass" name="FTP_Pass" length=32 placeholder="Ftp password" class="default-action">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_wd">Ftp root dir</label>
                    <input id="ftp_wd" name="ftp_wd" length=64 placeholder="Ftp working directory" class="default-action">
                  </div>                          
                  <br>
                  <h3>SMTP settings</h3>
                  <div class="input-group" id="smtp-group">
                    <label for="smtp_server">SMTP server</label>
                    <input id="smtp_server" name="smtp_server" length=32 placeholder="smtp server name" class="default-action">
                  </div>
                  <div class="input-group" id="smtp-group">
                    <label for="smtp_port">SMTP port</label>
                    <input id="smtp_port" name="smtp_port" length=6 placeholder="smtp port" class="default-action">
                  </div>                          
                  <div class="input-group" id="smtp-group">
                    <label for="smtp_login">SMTP login</label>
                    <input id="smtp_login" name="smtp_login" length=32 placeholder="smtp login email" class="default-action">
                  </div>
                  <div class="input-group" id="smtp-group">
                    <label for="SMTP_Pass">SMTP password</label>
                    <input id="SMTP_Pass" name="SMTP_Pass" length=32 placeholder="smtp password" class="default-action">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="smtp_email">SMTP email</label>
                    <input id="smtp_email" name="smtp_email" length=64 placeholder="smtp email to" class="default-action">
                  </div>   
                  <br>
                  <h3>Authentication settings</h3>
                  <div class="input-group" id="auth-group">
                      <label for="Auth_Name">Web login</label>
                      <input id="Auth_Name" name="Auth_Name" length=32 placeholder="Authentication user name" class="default-action">
                  </div>
                  <div class="input-group" id="auth-group">
                      <label for="Auth_Pass">Web password</label>
                      <input id="Auth_Pass" name="Auth_Pass" length=32 placeholder="Authentication password" class="default-action">
                  </div>                      
                </div>
              </nav>
              <div id="foot-spacer"></div>
            </div>
          </div>
        </div>
        <figure>
            <div id="stream-container" class="image-container hidden">
                <div class="streamSize" id="closeStream" title="Close screen">Ã—</div>
                <div class="streamSize" id="actualSize" title="Actual size">-</div>
                <div class="streamSize" id="maxFit" title="Fit to browser">#</div>
                <div class="streamSize" id="fullAspect" title="Full screen with aspect">&curren;</div>
                <div class="streamSize" id="fullSize" title="Full screen">&rect;</div>
                <div class="streamSize" id="saveImage" title="Download screenshot">v</div>
                <img id="stream" src="" crossorigin>
            </div>
        </figure>
        </figure>
      </div>
        <section id="footer">
          <div class="info-group center" id="fw_version-group">
              <label for="fw_version">Version</label>
              <div id="fw_version" class="default-action info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center" id="llevel-group">
              <label for="llevel">Ambient&nbsp;Light</label>
              <div id="llevel" class="default-action info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center" id="night-group">
              <label for="night">Night&nbsp;Time</label>
              <div id="night" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>
          <div class="info-group center" id="atemp-group">
              <label for="atemp">Camera&nbsp;Temp</label>
              <div id="atemp" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div> 
          <div class="info-group center" id="batt-group">
              <label for="battv">Battery&nbsp;Voltage</label>
              <div id="battv" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div> 
          <div class="info-group center" id="clock-group">
              <label for="clock">&nbsp;Camera&nbsp;local&nbsp;time</label>
              <div id="clock" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>
          <div class="info-group center" id="uptime-group">
              <label for="up_time">Up&nbsp;time</label>
              <div id="up_time" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>                                                 
          <div class="info-group center" id="rssi-group">
              <label for="wifi_rssi">Signal&nbsp;Strength</label>
              <div id="wifi_rssi" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>
          <div class="info-group center" id="heap-group">
              <label for="free_heap">Free&nbsp;heap</label>
              <div id="free_heap" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>  
          <div class="info-group center" id="heap-group">
              <label for="free_psram">Free&nbsp;PSRAM</label>
              <div id="free_psram" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>                 
          <div class="info-group center" id="total-group">
              <label for="total_bytes">Total&nbsp;space</label>
              <div id="total_bytes" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>                
          <div class="info-group center" id="used-group">
              <label for="used_bytes">Used&nbsp;space</label>
              <div id="used_bytes" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>
          <div class="info-group center" id="free-group">
              <label for="free_bytes">Free&nbsp;space</label>
              <div id="free_bytes" class="default-action info displayonly" name="textonly">&nbsp;</div>
          </div>   
        </section>                         
      </section> 
    </div>
    
    <div id="ShowLog" class="tabcontent">
      <br/><br/>
      <div class="grid-cols3">
        <div class="input-group" id="debugging-group" style="font-size: 20px; text-align: left">
          <label for="wsMode" title="Enable logging to websocket">Log to browser:</label>
          <div class="switch">
              <input id="wsMode" type="checkbox">
              <label title="Output log to WS" class="slider" for="wsMode"></label>
          </div>   
        </div>
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="clearWSlog" x="50%" y="50%" font-size="20" fill=var(--buttonText)>Clear WS Log</text>
          </svg>
        </div>
        <div class="input-group" id="dbg-group" style="font-size: 20px; text-align: left">
          <label for="dbgVerbose" title="Set verbose logging">Verbose:</label>
          <div class="switch">
            <input id="dbgVerbose" type="checkbox" class="default-action">
            <label title="Outputs additional information to log" class="slider" for="dbgVerbose"></label>
          </div>
        </div>
      </div>
      <pre id='applog' style="height:50vh;"></pre>
      </br/>
      <div class="grid-cols3">
        <div class="input-group" id="debugging-group" style="font-size: 20px; text-align: left">
          <label for="logMode" title="Enable logging to sd card">Log to SD card:</label>
          <div class="switch">
              <input id="logMode" type="checkbox" class="default-action">
              <label title="Output log to SD" class="slider" for="logMode"></label>
          </div>  
        </div> 
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="clearSDlog" x="50%" y="50%">Clear SD Log</text>
          </svg>
        </div>
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="refreshSDlog" x="50%" y="50%">Retrieve SD Log</text>
          </svg>
        </div>
      </div>
      <pre id='sdlog' style="height:50vh;"></pre>
    </div>
    
    <div id="EditConfig" class="tabcontent">
      <h2>Control</h2>
      <div class="grid-cols4">
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="save" x="50%" y="50%">Save</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="reset" x="50%" y="50%">Reboot ESP</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="deldata" x="50%" y="50%">Reload /data</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="clear" x="50%" y="50%">Clear NVS</text>
          </svg>
        </div>
        <div class="cfgTitle">
          <br/>
          <h2>Settings</h2>
          <h3>Press a button to view or modify settings (changed values are not validated)</h3>
          <h3>Press Save button to make changes permanent</h3>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="wifi" x="50%" y="50%">Wifi</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="motion" x="50%" y="50%">Motion</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="peripherals" x="50%" y="50%">Peripherals</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="other" x="50%" y="50%">Other</text>
          </svg>
        </div>
      </div>
      <div class="configGroup">
        <p id='configTable'></p>
      </div>
    </div>
           
    <div id="OTAUpload" class="tabcontent">
      <br/><br/>
      <form id="upload_form" enctype="multipart/form-data" method="post">
        <input type="file" name="upfile" id="upfile">
        <br/><br/>
        <progress id="progressOta" value="0" max="100" style="width:300px;"></progress>%
        <h3 id="status"></h3>
        <p id="loaded_n_total"></p>
      </form>
    </div>   
    <script>
      document.addEventListener('DOMContentLoaded', function (event) {

        /*********** initialisation  ***********/
        
        const baseHost = document.location.origin
        const wsServer = "ws://" + document.location.host + ":80/ws";
        let refreshInterval = 5000;
        let ws = null;
        let hbTimer = null;
        let updateData = {}; // receives json for status data as key val pairs
        let cfgGroupNow = -1;
        let loggingOn = false;
        let imgSize = { width: 0, height: 0 };
        let fitSize = { width: 0, height: 0 };
        const CLASS = "class";
        const ID = "id";
        let cameraModel = "OV2640";
        
        const $ = document.querySelector.bind(document);
        const $$ = document.querySelectorAll.bind(document);

        initialise();
        
        function initialise() {
          try {
            setListeners();
            // initWebSocket();
            loadStatus(""); 
            if (hbTimer == null) setTimeout(refreshStatus, refreshInterval);
          } catch (error) {showLog("Error: " + error.message, true);}
        }
        
        /*********** websocket functions ***********/
        
        // define websocket handling
        function initWebSocket() {
          loggingOn = true;
          showLog("Connect to: " + wsServer, true);
          ws = new WebSocket(wsServer);
          ws.onopen = onOpen;
          ws.onclose = onClose;
          ws.onmessage = onMessage; 
          ws.onerror = onError;
        }
          
        // periodically check that connection is still up and get status
        function heartbeat() {
          if (!ws) return;
          if (ws.readyState !== 1) return;
          sendCmd("H");
          clearTimeout(hbTimer);
          hbTimer = setTimeout(heartbeat, refreshInterval);    
        }
        
        // connect to websocket server
        function onOpen(event) {
          showLog("Connected", true);
          //heartbeat();
        }
        
        // process received WS message
        function onMessage(messageEvent) {
          if (messageEvent.data.startsWith("{")) {
            // json data
            updateData = JSON.parse(messageEvent.data);
            let filter = updateData.cfgGroup;
            delete updateData.cfgGroup;
            if (filter == "-1") updateStatus(); // status update
            else buildTable(updateData, filter); // format received config json into html table
          } else showLog(messageEvent.data, false);
        }
        
        function onError(event) {
          showLog("WS Error: " + event.code, true);
        }
        
        function onClose(event) {
          showLog("Disconnected: " + event.code + ' - ' + event.reason, true);
          loggingOn = false;
          ws = null;
          // event.codes:
          //   1006 if server not available, or another web page is already open
          //   1005 if closed from app
          if (event.code == 1006) alert("Closed websocket as a newer connection was made, refresh browser page");
          else if (event.code != 1005) initWebSocket(); // retry if any other reason
        }
        
        async function closeWS() {
          ws.send('K');
          await sleep(500);
          ws.close();
        }
        
        /*********** page layout functions ***********/
      
        function openTab(e) {
          // control tab viewing
          $$('.tabcontent').forEach(el => {el.style.display = "none";});
          $('#' + e.name).style.display = "inherit";
          $$('.tablinks').forEach(el => {el.classList.remove("active");});
          e.classList.add("active");
          if (e.name == 'camModel') show($('#main'));
          else hide($('#main'));
        }

        function accordian(accId) {
          // accordian buttons to show / hide elements
          let panel = $('#' + accId);
          if (panel.style.display === "inherit") panel.style.display = "none";
          else panel.style.display = "inherit";
        }
        
        /*********** data processing functions ***********/
        
        async function loadStatus(specifier) {
          // request and load current status from app
          const response = await fetch(baseHost+'/status'+specifier);
          if (response.ok) {
            updateData = await response.json();
            updateStatus();
            await sleep(1000);
          } else console.log(response.status); 
        }
        
        function refreshStatus() {
          // refresh status at required interval
          clearTimeout(hbTimer);
          loadStatus("?q");
          hbTimer = setTimeout(refreshStatus, refreshInterval);
        }
        
        function updateStatus() {
          // replace each existing value with new received value, using key name to match html tag id
          Object.entries(updateData).forEach(([key, value]) => {
            let elt = $('text#'+key); // svg button
            let eld = $('div#'+key); // display text
            let eli = $('#'+key); // input field
            if (elt) elt.textContent = value; 
            else if (eld) {if (eld.classList.contains('displayonly')) eld.innerHTML = value;} // display text 
            else if (eli != null) { // input fields
              if (eli.type === 'checkbox') eli.checked = !!Number(value);
              else if (eli.type === 'range') {
                eli.value = value; 
                eli.parentElement.children.rangeVal.value = value;
              }
              else if (eli.type === 'option') eli.selected = true;
              else eli.value = value; 
            }
            processUpdate(key, value);
          });
        }
        
        async function sendUpdates(doAction) {    
          // send bulk updates to app
          let jarray = {};
          jarray["action"] = doAction;
          // get each required update element and obtain id/name and value into array to send as json
          $$('.update-action').forEach(el => {
            if (el.nodeName == "INPUT") jarray[el.getAttribute('id')] = el.value.trim();
          });
          // send as json to server
          await fetch(baseHost + '/update', {
            method: 'POST', 
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(jarray),
          });
        } 
        
        /*********** utility functions ***********/
        
        function debounce(func, timeout = 500){
          // debounce rapid clicks to prevent unnecessary fetches
          let timer;
          return (...args) => {
            clearTimeout(timer);
            timer = setTimeout(() => { func.apply(this, args); }, timeout);
          };
        }
        
        const debounceSendControl = debounce((query) => fetch(baseHost + encodeURI('/control?' + query)));
        
        function sleep(ms) {
          return new Promise(resolve => setTimeout(resolve, ms));
        }
        
        function hide(el) {
          el.classList.add('hidden')
          el.style.display = "none";
        }
        
        function show(el) {
          el.classList.remove('hidden')
          el.style.display = "";
        }

        function disable(el) {
          el.classList.add('disabled');
          el.disabled = true;
        }

        function enable(el) {
          el.classList.remove('disabled');
          el.disabled = false;
        }
        
        function isActive(key) {
          return key.classList.contains('active') ? true : false;
        }
        
        /*********** command processing ***********/
        
        function setListeners() {
        
          // event listener for click events
         document.addEventListener("click", function (event) {
            const e = event.target;
            // svg rect elements, use id of its following text node
            if (e.nodeName == 'rect') processStatus(ID, e.nextElementSibling.id, null);
            // tab buttons, use name as target id 
            else if (e.classList.contains('tablinks')) openTab(e);
            // submit buttons
            else if (e.type === 'submit') processStatus(ID, e.id, 1);
            else if (e.tagName == 'BUTTON' || e.tagName == 'A') processStatus(ID, e.id, null);
            // navigation and presentation icons
            else if (e.tagName == 'NAV' || e.tagName == 'DIV') processStatus(CLASS, e.classList.value, e.id);
            //else console.log("Unhandled tag type " + e.tagName + " for " + e.id);
          });
          
          // event listener for change events
          document.addEventListener("change", function (event) {
            const value = event.target.value.trim();
            const e = event.target;
            const et = event.target.type;
            // input fields of given class
            if (e.nodeName == 'INPUT') {
              if (et === 'text') {
                if (e.classList.contains('configItem')) sendControl(e.name, value); // config input fields 
                else processStatus(ID, e.id, value);
              } 
              else if (et === 'range' || et === 'select-one' || et === 'time' || et === 'number' | et === 'password') 
                processStatus(ID, e.id, value);
              else if (et === 'checkbox') processStatus(ID, e.id, e.checked ? 1 : 0);
              else if (et === 'button' || et === 'file') processStatus(ID, e.id, 1);
              else if (et=== 'radio') {
                if (e.checked) processStatus(ID, e.id, value);
              }
              //else console.log("Unhandled input type " + et + " for " + e.id);
            }
            if (e.tagName == 'SELECT') processStatus(ID, e.id, value);
          });
          
          // event listener for input events
          document.addEventListener("input", function (event) {
            if (event.target.type === 'range') rangeMarker(event.target);
          });
          
          // event listener to close web socket on leaving page
          window.addEventListener('beforeunload', function (event) {
            if (ws) closeWS();
          });      
        }
        
        function sendWsCmd() {
          // send user command to websocket server
          let txt = $('#txtCmd');
          let line = txt.value;
          if (line != "" && ws !== undefined) {
            sendCmd(line);
            txt.value = "";
            txt.focus();
          } else showLog("No command or no connection", true);
        }
        
        function sendCmd(reqStr) {
          ws.send(reqStr);
          showLog("Cmd: " + reqStr, true);
        }
        
        function showLog(reqStr, fromUser) {
          if (loggingOn) {
            let date = new Date();
            // add timestamp to received text if generated by browser
            let logText = fromUser ? "[" + date.toLocaleTimeString() + " Web] " : "";
            logText += reqStr + "\n";
            // append to log display 
            let log = document.getElementById('applog');
            let new_node = document.createTextNode(logText);
            log.append(new_node);
            // auto scroll new entry unless scroll bar is not at bottom
            const bottom = 40; // double font size
            const pos = Math.abs(log.scrollHeight - log.clientHeight - log.scrollTop);
            if (pos < bottom) log.scrollTop = log.scrollHeight;
          }
        }
        
        function sendWsUpdates(doAction) {    
          // get each required update element and obtain id/name and value into array to send as json 
          let jarray = {};
          jarray["action"] = doAction;
          $$('.update-action').forEach(el => {
            if (el.nodeName == "INPUT") jarray[el.getAttribute('id')] = el.value.trim();
          });
          sendCmd('U' + JSON.stringify(jarray));
        }
        
        async function sendControl(key, value) {
          // send only  
          if (value == null) value = $('#'+key).value;
          if (value != null) {
            const response = await fetch(encodeURI(baseHost + "/control?" + key + "=" + value));
            if (!response.ok) console.log(response.status);
          }
        }
        
        async function sendControlResp(key, value) {
          // send and apply response
          const response = await fetch(encodeURI(baseHost + "/control?" + key + "=" + value));
          if (response.ok) {
            updateData = await response.json();
            updateStatus();
          } else console.log(response.status); 
        }
        
        /*********** config functions ***********/
        
        async function getConfig(cfgGroup) {
          // request config json for selected group
          const response = await fetch('/status?123456789' + cfgGroup);
          if (response.ok) {
            const configData = await response.json();
            // format received json into html table
            buildTable(configData, cfgGroup);
          } else console.log(response.status); 
        }
        
        function buildTable(configData, cfgGroup) {
          // dynamically build table of editable settings
          const divShowData = $('#configTable');
          divShowData.innerHTML = "";
          if (cfgGroupNow != cfgGroup) {
            cfgGroupNow = cfgGroup;
            const table = document.createElement("table"); 
            // Create table header row from heading names
            const colHeaders = ['Setting Name', 'Setting Value']; 
            let tr = table.insertRow(-1); 
            for (let i = 0; i < colHeaders.length; i++) {
              let th = document.createElement("th");    
              th.innerHTML = colHeaders[i];
              tr.appendChild(th);
            }

            // add each setting as a row containing setting name and setting value
            let newRow = 1;
            Object.keys(configData).forEach( key => {
              if (key != "cfgGroup") { // skip over this entry 
                if (newRow) tr = table.insertRow(-1);
                let tabCell = tr.insertCell(-1);
                if (newRow) {
                  tabCell.innerHTML = configData[key]; // name of setting
                  newRow = 0;
                } else {
                  // input field for value of setting
                  tabCell.innerHTML = '<input type="text" class="configItem" name="' + key + '" value="' + configData[key] +'">'; 
                  newRow = 1;
                }
              }
            })
            // add the newly created table at placeholder
            divShowData.appendChild(table);
          } else cfgGroupNow = -1;
        }

        /*********** OTA functions ***********/
         
        async function uploadFile() {
          // notify server to start ota task
          const response = await fetch('/control?startOTA=1');
          if (response.ok) {
            // submit file for uploading
            let file = $("#upfile").files[0];
            let formdata = new FormData();
            formdata.append("upfile", file);
            let ajax = new XMLHttpRequest();
            ajax.upload.addEventListener("progress", progressHandler, false);
            ajax.addEventListener("load", completeHandler, false);
            ajax.addEventListener("error", errorHandler, false);
            ajax.addEventListener("abort", abortHandler, false);
            ajax.open("POST", baseHost + ':82/upload');
            ajax.send(formdata);
          } else console.log(response.status); 
        }

        function progressHandler(event) {
          $("#loaded_n_total").innerHTML = "Uploaded " + event.loaded + " of " + event.total + " bytes";
          let percent = (event.loaded / event.total) * 100;
          $("#progressOta").value = Math.round(percent);
          $("#status").innerHTML = Math.round(percent) + "% transferred";
          if (event.loaded  == event.total) $("#status").innerHTML = 'Uploaded, wait for completion result';
        }

        function completeHandler(event) {
          $("#status").innerHTML = event.target.responseText;
          $("#progressOta").value = 0;
        }

        function errorHandler(event) {
          $("#status").innerHTML = "Upload Failed";
          $("#progressOta").value = 0;
        }

        function abortHandler(event) {
          $("#status").innerHTML = "Upload Aborted";
          $("#progressOta").value = 0;
        }
        
        /************* App specific ***************/
        
        const streamUrl = baseHost + ':81';
         
        function processStatus(dest, key, value) {
          // process user request
          if (dest == ID) {
            // operation based on ID
            if (key == "wifi") getConfig("0");
            else if (key == "peripherals") getConfig("0123");
            else if (key == "motion") getConfig("01");
            else if (key == "other") getConfig("012");
            else if (key == "clearSDlog") clearSDlog();
            else if (key == "refreshSDlog") getSDlog();
            else if (key == "clearWSlog") $('#applog').innerHTML = "";
            else if (key == "delete" || key == "uploadMove" || key == "upload") sdFile(key);
            else if (key == 'timezoneSel') setTz(key, value);
            else if (key == "framesize") frameSize(key, value);
            else if (key == "get-still") getStill();
            else if (key == "upfile") uploadFile();
            else if (key == "wsMode") value == 1 ? initWebSocket() : closeWS();
            else if (key == "download" && ($("#download").value != $("#download").value.split('.'))) window.location.href='/control?download=1';
            else if (key == "sfile") selectFileOrFolder(value);
            else if (key == "aec") setAec(key, value);
            else if (key == "awb_gain") setAwb(key, value); 
            else if (key == "agc") setAgc(key, value);
            
            else if (key == "forceRecord") recordAction(key);
            else if (key == "forcePlayback") playbackAction(key);
            else if (key == "forceStream") streamAction(key);
            else sendControl(key, value); // remaining values are passed thru to app
          } 
          else if (dest == CLASS) {
            // operations based on class
            if (key.substring(0, 9) == "quick-nav") navigation(value); 
            else if (key == "streamSize") {
              if (value == "saveImage") saveImage();
              else sizeView(value); 
            }
            else if (key == "pin-menu") pinMenu(); 
          }
        }
        
        function processUpdate(key, value) {
          // updates from app
          if (key == "clockUTC") checkTime(value);
          else if (key == 'clock') currClock = value;
          else if (key == "hostName") document.title = value;
          else if (key == "refreshVal") refreshInterval = value * 1000; 
          else if (key == "camModel") customButtons(key, value);
          else if (key == "aec") setAec(key, value, false);
          else if (key == "awb_gain") setAwb(key, value, false);
          else if (key == "agc") setAgc(key, value, false);
        }

        /************** menu functions ****************/
           
        function customButtons(key, value) {
          // update camera button text
          cameraModel = value;
          $('.camTab').innerHTML = cameraModel;
          // customise camera parameters according to camera model
          if (cameraModel == "OV2640") {
            // change button labels
            $('#aec2_lab').innerHTML = "AEC DSP";
            $('#awbg_lab').innerHTML = "AWB Gain";
            $('#dcw_lab').innerHTML = "DCW (Downsize EN)";
            // change range slider parameters
            changeRange('brightness', "-2", "2", "0");
            changeRange('contrast', "-2", "2", "0");
            changeRange('saturation', "-2", "2", "0");
            changeRange('ae_level', "-2", "2", "0");
            changeRange('gainceiling', "0", "6", "0");
            changeRange('aec_value', "0", "1200", "204");
            changeRange('agc_gain', "0", "30", "5", true);
            $('#gainceiling-group div.range-min').innerHTML = '2x';
            $('#gainceiling-group div.range-max').innerHTML = '128x';
            
          } else if (cameraModel == "OV3660" || cameraModel == "OV5640") {
            // change button labels
            $('#aec2_lab').innerHTML = "Night Mode";
            $('#awbg_lab').innerHTML = "Manual AWB";
            $('#dcw_lab').innerHTML = "Advanced AWB";
            // change range slider parameters
            changeRange('brightness', "-3", "3", "0");
            changeRange('contrast', "-3", "3", "0");
            changeRange('saturation', "-4", "4", "0");
            changeRange('sharpness', "-3", "3", "0");
            changeRange('ae_level', "-5", "5", "0");
            changeRange('gainceiling', "0", "511", "0");
            changeRange('agc_gain', "0", "63", "5", true);
            // show additional options
            $$('div.OV3660, div.OV5640').forEach(el => {show(el)});
            $$('#framesize option').forEach(el => {
              if (el.classList.contains(cameraModel)) show(el);
            });
            let avMax = (cameraModel == "OV3660") ? "1536": "1920"; 
            changeRange('aec_value', "0", avMax, "320");
          } else alert("Unhandled camera model: " + cameraModel);
        }
        
        function changeRange(id, min, max, val, isX = false) {
          // set parameters for range slider
          $('#'+id).min = min;
          $('#'+id).max = max;
          $('#'+id).value = val;
          $('#'+id+'-group div.range-min').innerHTML = isX ? (parseInt(min)+1)+'x' : min;
          $('#'+id+'-group div.range-max').innerHTML = isX ? (parseInt(max)+1)+'x' : max;
        }
           
        function navigation(key) { 
          const i = $('#'+key); // the clicked icon
          const m = $('#'+i.getAttribute('name')); // the associated menu 
          
          // toggle selected icon as active, others inactive
          i.classList.toggle('active');
          $$('nav.quick-nav:not(#'+i.id+')').forEach(el => {el.classList.remove('active')});   
          
          // toggle menu attached to icon as active, others inactive
          m.classList.toggle('active');
          $$('nav.panel:not(#'+m.id+')').forEach(el => {el.classList.remove('active')});   
          m.querySelector('.menu-action').checked = isActive(i); // open if icon toggled active, close if not
          
          if (isActive(i)) {
            $('#menu-selector').classList.remove('menu-closed');
            $('#menu-selector').classList.add('menu-open');
          } else {
            $('#menu-selector').classList.add('menu-closed');
            $('#menu-selector').classList.remove('menu-open');
          }
        }

        function pinMenu() {
          // toggle menu pinned status
          if ($('#menu-container').classList.contains('menu-pinned')) {
            $$('.menu-pinned').forEach(el => {
              el.classList.remove('menu-pinned');
              el.classList.add('menu-floating');
            });
          } else {
            $$('.menu-floating').forEach(el => {
              el.classList.remove('menu-floating');
              el.classList.add('menu-pinned');
            });
          }
        }
        
        function rangeMarker(e) {
          // show value marker for range sliders
          controlMin = e.min;
          controlMax = e.max;
          controlVal = e.value;
          const range = controlMax - controlMin;
          const position = (controlVal - controlMin) / range * 30;
          const output = e.nextElementSibling; // assumes next element is output tag
          output.style.cssText = 'left: calc(' + position + '%)';
          output.value = controlVal;
        }
        
        /************** stream functions ****************/
        
        const view = $('#stream')
        const viewContainer = $('#stream-container')
        const recordButton = $('#forceRecord')
        const recordingIndicator = $('#recording-indicator')
        const streamButton = $('#forceStream')
        const playbackButton = $('#forcePlayback') 

        function getStill() {
          stopAll();
          view.src = streamUrl+"/stream?random="+Date.now(); 
          showView(false);
        }
       
        function recordAction(key) {
          if (isActive($('#'+key))) deactivateRecordButton();
          else activateRecordButton();
        }
                
        function playbackAction(key) {
          if (isActive($('#'+key))) deactivatePlaybackButton();
          else activatePlaybackButton();
        }      

        function streamAction(key) {
          if (isActive($('#'+key))) deactivateStreamButton();
          else activateStreamButton();
        } 

        function activatePlaybackButton() {
          stopAll();
          playbackButton.classList.add("active");
          playbackButton.innerHTML = "â–¢&nbsp;Stop Playback";
          playbackButton.classList.add("blinking");
          view.src = streamUrl+'/stream?source=file'; 
          checkStream();
          showView(true);
        }
        
        async function checkStream() {
          // check when stream ends to close it
          let running = true;
          while (running) {
            try {
              await view.decode();
            } catch {
              running = false;
            }
            await new Promise((resolve) => setTimeout(resolve, 500));
          }
          stopAll();
        }
         
        function deactivatePlaybackButton() {
          window.stop();
          playbackButton.classList.remove("active");
          sendControl("stopStream", "1");
          playbackButton.innerHTML = "âž¤&nbsp;Start Playback";
          playbackButton.classList.remove("blinking");
          disable(playbackButton);
          hide(viewContainer);
        }

        function activateRecordButton() {
          stopAll();
          recordButton.classList.add("active");
          sendControl("forceRecord", "1");
          recordButton.innerHTML = "â–¢&nbsp;Stop Recording";
          show(recordingIndicator);
          recordingIndicator.classList.add("blinking");
        }
        
        function deactivateRecordButton() {
          recordButton.classList.remove("active");
          sendControl("forceRecord", "0");
          recordButton.innerHTML = "âž¤&nbsp;Start Recording";
          recordingIndicator.classList.remove("blinking");
          hide(recordingIndicator);
        }

        function activateStreamButton() {
          stopAll();
          streamButton.classList.add("active");
          view.src = streamUrl+'/stream?source=sensor'; 
          streamButton.innerHTML = "â–¢&nbsp;Stop Stream";
          streamButton.classList.add('blinking');
          showView(false);
        }
        
        function deactivateStreamButton() {
          window.stop();
          streamButton.classList.remove("active");
          sendControl("stopStream", "1");
          streamButton.innerHTML ="âž¤&nbsp;Start Stream";
          streamButton.classList.remove('blinking');
          hide(viewContainer);
        }
        
        function stopAll() {
          if (isActive(recordButton)) deactivateRecordButton();
          if (isActive(playbackButton)) deactivatePlaybackButton();
          if (isActive(streamButton)) deactivateStreamButton();
          hide(viewContainer);
        }

        function showView(isFile) {
          // set size values for given framesize
          let sizeStr = '800x600';
          if (isFile) {
            // get framesize from filename  
            sizeStr = $('#sfile').value.split('_')[2]; // the frame type eg SVGA
            $$('#framesize option').forEach(el => { 
              if (el.innerHTML.substr(0, sizeStr.length) == sizeStr) sizeStr = el.innerHTML; // now contains eg SVGA(800x600)
            });
          } else sizeStr = $('#framesize option:checked').innerHTML; // get framesize from selected framesize
             
          // determine actual image size using framesize pixels
          const fwidth =  parseInt(sizeStr.split('x')[0].match(/\d+/));
          const fheight = parseInt(sizeStr.split('x')[1].match(/\d+/));
          imgSize = {width: fwidth, height: fheight};
          sizeView('maxFit'); // initial view size
        }
          
        function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
          const ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
          return { width: Math.round(srcWidth*ratio), height: Math.round(srcHeight*ratio) };
        }
        
        function sizeView(selectedSize) {  
          // stream icons to set size of screen
          // - max size to fit browser window for aspect ratio
          // # actual frame size
          // Â¤ fullscreen with correct aspect ratio (lose some)
          // â–­ fullscreen (aspect ratio changed)
          // x close screen
          // v download still image 
          
          if (selectedSize == 'closeStream') stopAll();
          else {
            if (selectedSize == 'maxFit') {
              fitSize = calculateAspectRatioFit(imgSize.width, imgSize.height, 
              window.screen.availWidth - $('#menu-container').offsetWidth - 25, 
              window.innerHeight - $('.tab').offsetHeight - $('#footer').offsetHeight - 25);
              viewContainer.style.cssText = 'width:'+fitSize.width+'px; height:'+fitSize.height+'px';
            }
            else if (selectedSize == 'actualSize') {
              viewContainer.style.cssText = 'width:'+imgSize.width+'px; height:'+imgSize.height+'px';
            }
            else if (selectedSize == 'fullAspect') {
              viewContainer.requestFullscreen();
              const r = calculateAspectRatioFit(imgSize.width, imgSize.height, window.screen.availWidth, window.screen.availHeight)
              viewContainer.style.cssText = 'width:'+r.width+'px; height:'+r.height+'px';
              view.style.cssText = "width: 100%; height:auto";
            }
            else if (selectedSize == 'fullSize') {
              viewContainer.requestFullscreen();
              viewContainer.style.cssText = 'width:'+window.screen.availWidth+'px; height:'+window.screen.availHeight+'px';
              view.style.cssText = "width: 100%; height: 100%";
            }
            if ((selectedSize == 'actualSize' || selectedSize == 'maxFit') && document.fullscreenElement !== null) document.exitFullscreen();
            
            // locate size buttons on screen
            let buttonPos = 5;  
            $$('.streamSize').forEach(el => {
              if (el.id != selectedSize) {
                el.style.right = buttonPos + 'px'; 
                buttonPos += 20;
                show(el);
              } else hide(el);
            });
            show(viewContainer); 
          }
        }
        
        function saveImage() {
          const canvas = document.createElement("canvas");
          canvas.width = view.width;
          canvas.height = view.height;
          document.body.appendChild(canvas);
          canvas.getContext('2d').drawImage(view,0,0);
          let anchor = document.createElement("a");
          anchor.download = currClock+".jpg";
          anchor.href = canvas.toDataURL("image/jpeg");
          anchor.click();
          anchor.remove();
          canvas.parentNode.removeChild(canvas);
        }

        /************* user selection functions ************/

        async function selectFileOrFolder(filePath) {
          // build folder / file option list from json
          const sid = $('#sfile');
          $$('*').forEach(el => { el.style.cursor = ("wait")});
          let pathDir;
          if (filePath == '/~reset') pathDir = "";
          else {
            $('#download').value = filePath; //Store file path for download
            $('#delete').value = filePath; //Store file path for delete
            $('#upload').value = filePath; //Store file path for ftp upload
            $('#uploadMove').value = filePath; //Store file path for ftp upload move7
            pathDir = filePath.substring(0,filePath.lastIndexOf("/"));
          }
           // if not a file list, remove all except first option
          if (pathDir == "") $$('#sfile option:not(:first-child)').forEach(el => { el.remove()}); 
          if (filePath.substr(-4) === '.avi' && !isActive(playbackButton)) enable(playbackButton);
          else disable(playbackButton);
          
          const response = await fetch(encodeURI(baseHost + '/control?sfile='+filePath));
          if (response.ok) {
            const fileData = await response.json();
            Object.entries(fileData).forEach(([key, value]) => {
              let option = document.createElement("option");
              option.text = value;
              option.value = key;
              sid.add(option);
            });
            $$('*').forEach(el => { el.style.cursor = ("default")});
          } else console.log(response.status); 
        }
          
        function frameSize(key, value) {
          sendControl(key, value);
          sendControlResp("updateFPS", value);
        }
        
        function setAgc(key, value, doSend = true) {
          if (value) {
            show($('#gainceiling-group'));
            hide($('#agc_gain-group'));
          } else {
            hide($('#gainceiling-group'));
            show($('#agc_gain-group'));
          }
          if (doSend) sendControl(key, value);
        }
        
        function setAec(key, value, doSend = true) {
          value ? hide($('#aec_value-group')) : show($('#aec_value-group'));
          if (doSend) sendControl(key, value);
        }

        function setAwb(key, value, doSend = true) {
          value ? show($('#wb_mode-group')) : hide($('#wb_mode-group'));   
          if (doSend) sendControl(key, value);
        }

        function checkTime(value) {
          let now = new Date();
          let nowUTC = Math.floor(now.getTime() / 1000);
          let timeDiff = Math.abs(nowUTC - value);  
          if (timeDiff > 5) sendControl("clockUTC", nowUTC); // 5 secs 
        }
        
        function setTz(key, value) {
          $('#timezone').value = value;
          sendControl(key, value);
        }
        
        function clearSDlog() {
          if (window.confirm('This will delete all log entries on SD. Are you sure ?')) { 
            $('#sdlog').innerHTML = "";
            sendControl("resetLog", "1");
          }
        }
        
        async function getSDlog() {
          // request SD log file
          const response = await fetch('/web?log.txt');
          if (response.ok) {
            const logData = await response.text();
            $('#sdlog').innerHTML = logData; 
          } else console.log(response.status); 
        }
        
        function sdFile(key) {
          const value = $('#'+key).value
          if (key == "delete") {
            if (!confirm("Are you sure you want to delete " + value + " from the SD card?")) return false;
          }
          sendControl(key, value);
          if (key == "delete" || key == "uploadMove") selectFileOrFolder("/~reset");
        }

      });
    </script>    
  </body>
</html>